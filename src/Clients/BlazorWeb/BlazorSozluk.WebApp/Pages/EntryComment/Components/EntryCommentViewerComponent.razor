@using BlazorSozluk.WebApp.Infrastructure.Models
@using BlazorSozluk.WebApp.Pages.Entry.Components

@if (EntryComment is not null)
{
    <div class="card border-0">
        <div class="card-body col-md-12">
            <p class="entry-content">@EntryComment.Content</p>
            <EntryFooterRateFavoriteComponent EntryId="@EntryComment.Id"
                                          OnFavClicked="@OnFavClicked" 
                                          OnVoteClicked="@OnVoteClicked"
                                          FavoritedCount="@EntryComment.FavoritedCount"
                                          IsFavorited="@EntryComment.IsFavorited"
                                          VoteType="@EntryComment.VoteType"/>

            <EntryFooterAuthorComponent UserName="@EntryComment.CreatedByUserName"
                                    CreateDate="@EntryComment.CreatedDate" />
        </div>
    </div>
}

@code {
    [Parameter] public GetEntryCommentsViewModel EntryComment { get; set; } = new();

    [Inject] IVoteService voteService{ get; set; }
    [Inject] IFavService favService{ get; set; }

    private async Task OnFavClicked(FavClickedEventArgs args) 
    {
        if(args.IsFaved) 
        {
            await favService.CreateEntryFav(args.EntryId);
            EntryComment.IsFavorited = true;
            EntryComment.FavoritedCount++;
        }
        else
        {
            await favService.DeleteEntryFav(args.EntryId);
            EntryComment.IsFavorited = false;
            EntryComment.FavoritedCount--;
        }

        StateHasChanged();
    }

    private async Task OnVoteClicked(VoteClickedEventArgs args)
    {
        if(args.UpVoteDeleted || args.DownVoteDeleted)
        {
            await voteService.DeleteEntryVote(args.EntryId);
            EntryComment.VoteType = Enums.VoteType.None;
            return;
        }

        if(args.IsUpVoteClicked)
        {
            await voteService.CreateEntryUpVote(args.EntryId);
            EntryComment.VoteType = Enums.VoteType.UpVote;
            return;
        }
        if (args.IsDownVoteClicked)
        {
            await voteService.CreateEntryDownVote(args.EntryId);
            EntryComment.VoteType = Enums.VoteType.DownVote;
            return;
        }

    }
}
